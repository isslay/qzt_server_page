package ${package.Controller};

import com.qzt.common.core.constant.SysConstant;
import com.qzt.common.core.model.PageModel;
import com.qzt.common.web.model.ResultModel;
import com.qzt.common.web.util.ResultUtil;
import io.swagger.annotations.Api;
import org.springframework.web.bind.annotation.*;
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.qzt.bus.model.${entity};
import com.qzt.bus.rpc.api.${table.serviceName};
import org.springframework.beans.factory.annotation.Autowired;
import javax.validation.Valid;
import java.util.Arrays;
import java.util.Date;


/**
 * <p>
 * $!{table.comment}前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("/back/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "${table.controllerName}", description = "${table.controllerName}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} service;

    /**
    * 根据$!{table.comment}ID查询
    *
    * @param id $!{table.comment}ID
    * @return ResultModel
    * @author ${author}
    * @date ${date}
    */
    @GetMapping("/query/{id}")
    public ResultModel query(@PathVariable Long id) {
        try {
            ${entity} entity = service.selectById(id);
            return ResultUtil.ok(entity);
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(SysConstant.ResultCodeEnum.DATA_ERROR_KEY);
        }
    }

    /**
    * 查询$!{table.comment}分页方法
    *
    * @param pageModel 分页实体
    * @return ResultModel
    * @author ${author}
    * @date ${date}
    */
    @PostMapping("/queryListPage")
    public ResultModel queryListPage(@RequestBody PageModel<${entity}> pageModel) {
        try {
            pageModel = (PageModel<${entity}>) service.find(pageModel);
            return ResultUtil.ok(pageModel);
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(SysConstant.ResultCodeEnum.DATA_ERROR_KEY);
        }
    }

    /**
     * 新增$!{table.comment}方法
     *
     * @param entity $!{table.comment}实体
     * @return ResultModel
     * @author ${author}
     * @date ${date}
     */
    @PostMapping("/add")
    public ResultModel add(@Valid @RequestBody ${entity} entity) {
        try {
            entity.setCreateBy(super.getCurrentUserId());
            entity.setUpdateBy(this.getCurrentUserId());
            ${entity} entityback = service.add(entity);
            if (entityback == null) {
                return ResultUtil.fail(SysConstant.ResultCodeEnum.INCREASE_THE_FAILURE);
            } else {
                return ResultUtil.ok();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(SysConstant.ResultCodeEnum.DATA_ERROR_KEY);
        }
    }

    /**
     * 修改$!{table.comment}方法
     *
     * @param entity $!{table.comment}实体
     * @return ResultModel
     * @author ${author}
     * @date ${date}
     */
    @PostMapping("/modify")
    public ResultModel modify(@RequestBody ${entity} entity) {
        try {
            entity.setUpdateBy(this.getCurrentUserId());
            entity.setUpdateTime(new Date());
            ${entity} entityback = service.modifyById(entity);
            if (entityback == null) {
                return ResultUtil.fail(SysConstant.ResultCodeEnum.INCREASE_THE_FAILURE);
            } else {
                return ResultUtil.ok();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(SysConstant.ResultCodeEnum.DATA_ERROR_KEY);
        }
    }

    /**
     * 批量删除$!{table.comment}方法
     *
     * @param ids $!{table.comment}ID集合
     * @return ResultModel
     * @author ${author}
     * @date ${date}
     */
    @PostMapping("/delBatchByIds")
    public ResultModel delBatchByIds(@RequestBody Long[] ids) {
        try {
            return ResultUtil.ok(service.deleteBatchIds(Arrays.asList(ids)));
        } catch (Exception e) {
            e.printStackTrace();
            return ResultUtil.fail(SysConstant.ResultCodeEnum.DATA_ERROR_KEY);
        }
    }
}

#end